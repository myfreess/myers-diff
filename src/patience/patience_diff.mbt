
fn patience_diff(old~ : String, new~ :String) -> Array[Array[@diff.Edit]] {
  let old = @diff.lines(old)[:]
  let new = @diff.lines(new)[:]
  let mut old_base = 0
  let mut new_base = 0
  let split_points = longest_increasing_subsequence(find_unique(old~, new~))
  let edits = Array::new(capacity = old.length() + new.length())
  for pair in split_points.iter() {
    let (old_i, new_i) = pair
    let subedits = @diff.linear_diff(old = old[old_base:old_i], new = new[new_base:new_i])
    match subedits {
      None => ()
      Some(subedits) => edits.push(subedits)
    }
    old_base = old_i
    new_base = new_i
  } else {
    let subedits = @diff.linear_diff(old = old[old_base:], new = new[new_base:])
    match subedits {
      None => ()
      Some(subedits) => edits.push(subedits)
    }
  }
  return edits
}


fn pedits(edits : Array[Array[@diff.Edit]]) -> String {
  let buf = StringBuilder::new()
  for seg in edits.iter() {
    for edit in seg.iter() {
      buf.write_string(@diff.pprint_edit(edit))
      buf.write_char('\n')
    }
  }
  buf.to_string()
}

test "totally different" {
  let old =
    #|aaaaa
    #|bbbbb
    #|ccccc
  let new = ""
  inspect!(pedits(patience_diff(old~, new~)), content=
    #|-    1         aaaaa
    #|-    2         bbbbb
    #|-    3         ccccc
    #|
  )
}

test "divide into two" {
  let old =
    #|aaaaa
    #|00000
    #|bbbbb
    #|ccccc
  let new =
    #|ddddd
    #|eeeee
    #|00000
    #|fffff
  inspect!(pedits(patience_diff(old~, new~))
  , content=
  #|-    1         aaaaa
  #|+         1    ddddd
  #|+         2    eeeee
  #|     2    3    00000
  #|-    3         bbbbb
  #|-    4         ccccc
  #|+         4    fffff
  #|
  )
}

test "reorder" {
  let old =
    #|aaaaa
    #|
    #|bbbbb
    #|
    #|ccccc
  let new = 
    #|bbbbb
    #|
    #|aaaaa
    #|
    #|ccccc
    
  // diff generated by linear myers
  // -    1         aaaaa
  // -    2         
  //      3    1    bbbbb
  // +         2    
  // +         3    aaaaa
  //      4    4    
  //      5    5    ccccc
  inspect!(pedits(patience_diff(old~, new~)), content=
    #|+         1    bbbbb
    #|+         2    
    #|     1    3    aaaaa
    #|-    2         
    #|-    3         bbbbb
    #|     4    4    
    #|     5    5    ccccc
    #|
  )
}